(ns adventofcode.2019.day01
  (:require
   [clojure.string :as str]
   [adventofcode.utils :as u]))

(def input1
  (->> "77355\n115734\n59983\n106798\n71384\n112431\n87261\n98469\n104485\n63185\n112442\n90113\n62805\n77610\n61459\n55290\n139325\n58463\n65173\n95550\n101228\n70912\n147516\n62547\n137966\n53801\n115927\n133275\n147358\n126852\n110379\n107234\n130258\n127847\n118167\n122223\n90956\n141688\n88278\n54049\n135498\n123187\n125149\n61475\n136691\n133089\n120734\n112196\n88342\n94531\n105013\n118379\n106009\n78690\n87934\n75396\n83546\n64225\n104813\n127819\n78321\n107227\n107651\n139758\n50150\n55272\n106774\n68290\n104639\n140973\n121498\n89391\n108435\n73725\n51004\n104700\n127297\n91490\n103583\n128041\n146250\n142082\n95475\n65298\n130514\n92002\n141553\n126533\n75251\n143249\n146307\n50681\n128266\n109199\n72487\n50416\n92153\n120627\n119192\n56510"
    (str/split-lines)
    (map u/to-int)))

(defn fuel  [mass] (-> mass (/ 3) Math/floor (- 2)))
(defn ffuel [mass] (->> mass (iterate fuel) (take-while pos?) (rest) (reduce +)))

(defn f [f xs] (->> xs (map f) (reduce +) (int)))

(assert (= (f fuel input1) 3349352))

(let [r2 (f ffuel input1)]
  (assert (not= r2 15069553))
  (assert (not= r2 15069910))
  (assert (not= r2 5020797))
  (assert (= r2 5021154)))