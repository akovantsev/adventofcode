(ns adventofcode.y2022.day23
  (:require [clojure.string :as str]
            [adventofcode.utils :as u]))

(def sample "....#..\n..###.#\n#...#.#\n.#...##\n#.###..\n##.#.##\n.#..#..")
(def input "#.##..##.#..#.##..##....##..#..#####...#.###.#..##..#..#.#...##..##....\n##..###.#.#.#..##.##.####.........#...#..#..#.#..#.#....##..###.#.##..#\n#.......###....#.#.##.#.#.#.##..###...###..##.....#...#.##.##.......##.\n...##.#......#.#.#..#.###..#.###....#....#.###.##....####....##....##..\n.#...##..###...##.#.#..#...####.#.##.#.#..#.##.###.###.#.##.##..#.#...#\n#..##....##.#..##.##...###..##.#...##...#####...#####.##..#.###....#.#.\n###....#....#.##.####.###.#..####..##..##..#..#.##.#######.##....###...\n###..###.....###..##..##....#......#.#.##...####.######..###.###....###\n#.#.###.###.....###.####.#.####...#.#.###.#...#.##..##.##.#..####..#...\n####.##...#....##.##.#.#....##.###....#.#..#.....##...##.#...###.##.#.#\n...#.#..####.###...###.#....###...##.####..#.######.##.##..#.#..##...#.\n#####......#.####.#####...#...#..#..#.#.#.#.#.#.#.#.##.#..#.###.#....#.\n#..#.#.#..#...#.#.##..#.######.##..#.###...#.#.#...#.####..##..##..#.#.\n..#.#..###....#.##.##....####.#########..#.########..##....#..#..##..#.\n.#.#.#...##...##.#.#..#..#####..###....#..#...####.##.####.###.##..##..\n.##.####..#.#######..#.#######..##..###....#.#..#..##.#..#.#..###.....#\n#....#.#####..#.##...###.###....#.#.#.#..#.##.####...#...##..#####.##..\n...##.###.##...#.##.###.#.###....####.....#.##.##.##.###...###.###.#.##\n..###...#...##....#.###.....##..####..#.###.####..##.###....##.#....##.\n...#..##..#..##.###.#....###....#..##..#...##.#..##.#.####...##.##..###\n######.......####..#..#.#####.......#####..#.#..##..#......#.#.#.#####.\n.#...#..#.##.###..#.#.#..####.#.########.#.###..####.#..#.#..###.#####.\n...####.#..#..#.##...#.#####.########.##..##....#####.#.##..######.#.##\n.....#..##.#.....#..#.#.##..######..####.#..#....##.....###.#.#..##..#.\n..##.##..##.#.#.##...##.##...#..##.....#..#..#.#.#.....#.#.##.###...###\n##.#..#.#.####.##....#...##.#...#...#..#.##..#...##.....#.#.##.#####...\n...#..##..##...#..###....#..#.###..####...#.#..##.###.##......###.#.#.#\n..##.#.#.##..###.....#..##.#....#....#....#.##..#.#.####.#....##..#..##\n.##..##..#.#.....###..#.#..#.##.#.#.#..#..#.##.#.###...#..#..##.#....##\n......#...######....###.##..#.###.####.##.##...#.###...####.##..#..#...\n#..##.#.###.##......####...#.#.##.#.#....##.##..#.#.....####...#..###..\n..##...#.##..#.....#######.#.#.###.#.##...####..#.#....##.###..##.#.###\n...####..#..##.########..#####.##..##...#..##..##..#...###.###....#.###\n.###.#..#.##.#..###.#.##.#.#...#.#.#.##..##.#....###.#..#.....#..##..#.\n...##.##...#..#.####.....#.##....####.#.###..##...#..#.####...##..##.##\n###...##....##..##.#...##......#...##.##.#.....##..##.#..#.##......#..#\n.......#.######...#####....#...#####.#####...##..#..#.#.#..........#.#.\n#######.#...#.#..#..#..##..#.####..#.##..###..###.##.#...#.#..#.####.##\n.#..#......#.#....###.#..##..####.#..#.#..##..#####.#....##.#####.#.#.#\n.#.###.###..#..#.#.#.#..##.#......###.##.#....#######.#..#.#####.....##\n#.####..###.#..###.#.#...##.##....###.#.#.#.###..#...#...#.##.###...#..\n#..##..##.##..##....###..######....#.#####.##..#...#....#.#.###.###....\n#.###..##.##..#.....##...#..#..#####.#.##..##..#.#...#.....##.#..#.##.#\n##...#...#.##..####..#..#.###....#...#.....#.#.#.###...###...#####.#.##\n.#.###.....#.#..#.###########.######..#########.##.##..#.#.#...#..##.##\n##.#################.#.##.##....####.....#..#.#.##.###.##..#..#.##..#.#\n.##.####.#.#..##.##.#.#..#.###.#..#..#.####....#.###.####.#.#..##..####\n##....###.#.####.#.#.............##.....###.##.#.###.####...#####.##.#.\n...##.#.#.#####.####.##.#..##.###.###.####.#.#.....#.#.#...#####..####.\n######.#....#...#.#.######.#.#....#.##..#..#..#..#.......#..#.##.#.#...\n...#..#....#.#.#...###.####..##.#.#..#.#.#.####.#..###...###.######...#\n#.#.###......##...#...##....###......#.###...#...###..#..####..##...#.#\n#..##.....#........###.##..#.#.#.#.##..#.##.#..###.##.#.####..###.##.#.\n.##....#..##.###.#.#.#..#..###..#..#####.##....#..#####.#.##..#.##.###.\n.#.##.###.####.#.#..#.###.###.#.......####.##...#..##.#.##.##..#.###...\n#.##...#####.#...#.#.##..###.#.##.###########..#...#..#.#.###.#.##..#.#\n##...#...#.###.#..##..#...##....#...#.#....###.###.#.#..#...#.#.#.#.###\n#.#.######.##.#....#.....#..##...#.#####...##.##...#..###.#...##.#..##.\n##.#######.....#....#.###..#..#.###.###..#.....####....#.####..#.....#.\n#..#..##..##.#.##......#....#.#.....#......#...##.###..#.#.###.......##\n#..#.#..######.#.......##..#...#....#####.#...#.##...#...###..####.##..\n.....#.....#.#.##..###.###.##..#.##.##..#.#####..##.##..###..###..#.###\n...#.###.#.#.#.##...##.##...#..#..#..####.#.##.#...#.#..##.#.#######.##\n.####.####..#.####...#...#.#..##...##.##..#....#.#.###.###..#####...##.\n..##.#.###.####.#####...#......#.#.###...###..##.##.###.####.###.#..#.#\n#.##..####.#.#..#.##..#.##.#.##.#..###.####.#.#.#.##..#.....##.#.#...#.\n.##...#.#.#####.###.#...###.#......#####.....#.#######.##.#..##...###..\n##.#.#####......####.####...#####....#..####.#.#.####...####.###.###.##\n#.#.#.####..##.##.##.#.##.#.#####.##...#....##..##...#.######.....#..##\n.#.....#...###.#.#.###.#..#...###...##.......####...####.###..#....#...\n..##.##..#......###...##.....##.#..#...###.##.#.##.##...#.#...#.#..#...")

(defn parse [ss]
  (let [lines (->> ss str/split-lines (mapv #(into [] %)))]
    (set
      (for [x (range 0 (-> lines first count))
            y (range 0 (-> lines count))
            :when (= \# (get-in lines [y x]))]
        [x y]))))

(def neighbours8m
  (memoize
    (fn [[x y]]
      (let [x- (dec x) x+ (inc x)
            y- (dec y) y+ (inc y)]
        {:NW [x- y-] :N [x y-] :NE [x+ y-]
         ,:W [x- y],,,,,,,,,,,, :E [x+ y]
         :SW [x- y+] :S [x y+] :SE [x+ y+]}))))


(defn score [xys]
  (let [maxx (->> xys (map first) (reduce max))
        minx (->> xys (map first) (reduce min))
        maxy (->> xys (map second) (reduce max))
        miny (->> xys (map second) (reduce min))]
    (->>
      (for [x (range minx (inc maxx))
            y (range miny (inc maxy))]
        [x y])
      (remove xys)
      count)))


(defn decide-one [xys idx xy]
  (let [{:keys [NE N NW E W SE S SW]} (neighbours8m xy)
        pairs  [[N [NW N NE]]
                [S [SW S SE]]
                [W [NW W SW]]
                [E [NE E SE]]]
        pairs+ (concat pairs pairs)
        idx-   (mod idx 4)
        xy+    (fn [[xy+ nxys]]
                 (when (not-any? xys nxys)
                   xy+))]
    (if (not-any? xys [NE N NW E W SE S SW])
      xy
      (->> pairs+ (drop idx-) (take 4) (some xy+) (#(or % xy))))))

(defn decide-all [idx xys]
  (reduce
    (fn [res xy]
      (update res (decide-one xys idx xy) conj xy))
    {} xys))

(defn move-one [res xy+ xys]
  (if (-> xys count (= 1))
    (conj res xy+)
    (into res xys)))

(defn move-all [decisions]
  (reduce-kv move-one #{} decisions))

(defn step [[idx xys]]
  [(inc idx) (move-all (decide-all idx xys))])


(defn p1 [ss] (->> [0 (parse ss)] (iterate step) (drop 10) first second score))


(defn fixed-point [xs] (reduce #(if (= (second %1) (second %2)) (reduced %1) %2) xs))

(defn p2 [ss] (->> [0 (parse ss)] (iterate step) fixed-point first inc))


(assert (= 110 (p1 sample)))
(time (assert (= 3940 (p1 input))))


(assert (= 20 (p2 sample)))
(time (assert (= 990 (p2 input))))

"Elapsed time: 153.061941 msecs"
"Elapsed time: 9265.85579 msecs"